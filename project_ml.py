# -*- coding: utf-8 -*-
"""PROJECT ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SKxlt2wy6oywc8Rb1_HFdPevsEUSvi7Y
"""

#koneksi drive
from google.colab import drive
drive.mount('/content/gdrive')
!ls

# Commented out IPython magic to ensure Python compatibility.
#masuk ke direktori project
# %cd /content/gdrive/MyDrive/YOLOSKIN

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="1cAnwA5hzVayU4ikxPJQ")
project = rf.workspace("harsh-shakya-yytye").project("new-mod-nabkg")
version = project.version(1)
dataset = version.download("yolov5")

#program yolo
!git clone https://github.com/ultralytics/yolov5

# Commented out IPython magic to ensure Python compatibility.
#masuk folder yolo
# %cd yolov5

!pip install -qr requirements.txt # install dependencies (ignore errors)
import torch

from IPython.display import Image, clear_output # to display images
from utils.downloads import attempt_download # to download models/datasets

# clear_output()
print('Setup complete. Using torch %s %s' % (torch.__version__, torch.cuda.get_device_properties(0) if torch.cuda.is_available() else 'CPU'))

# Commented out IPython magic to ensure Python compatibility.
# # Train YOLOv5s on COCO128 for 3 epochs
# %%time
# !python train.py --img 416 --batch 16 --epochs 100 --data "/content/gdrive/MyDrive/YOLOSKIN/New-Mod-1/data.yaml" --cfg "/content/gdrive/MyDrive/YOLOSKIN/yolov5/models/yolov5s.yaml" --weights '' --name YOLOSKIN --cache

#untuk mencoba hasil deteksi
!python detect.py --weights="/content/gdrive/MyDrive/YOLOSKIN/yolov5/runs/train/YOLOSKIN/weights/best.pt" --img 416 --conf 0.25 --source "/content/gdrive/MyDrive/YOLOSKIN/New-Mod-1/valid/images/100_jpg.rf.42a67459af483007d59a80a350bba2f3.jpg"

!cp -r /content/gdrive/MyDrive/NewYoloskin /content/gdrive/MyDrive/YOLOSKIN

!pip install streamlit
import streamlit as st

# --- Main Application UI ---
st.header("Deteksi Penyakit Kulit")


st.markdown("Berikut adalah penjelasan singkat mengenai beberapa jenis penyakit kulit yang dapat dideteksi:")

daftar_penyakit = [
    'Darier_s_Disease',
    'Epidermolysis_Bullosa_Pruriginosa',
    'Hailey_Hailey_Disease',
    'Hemangiome',
    'Impetigo',
    'Leishmanios',
    'Lupus_Erythematosus_Chronicus_Discoides',
    'Melanoma',
    'Molluscum_Contagiosum',
    'Porokeratosis',
    'Psoriasis',
    'Tinea_Corporis',
    'Tungiasis',
    'acne',
    'basal_cell_carcinoma',
    'eczema',
    'lichen',
    'nevus',
    'normal_skin'
]

deskripsi_penyakit = {
    'Darier_s_Disease': 'Penyakit genetik langka yang menyebabkan lesi kulit berkerak, biasanya di area berminyak dan terlipat.',
    'Epidermolysis_Bullosa_Pruriginosa': 'Kelainan kulit langka yang menyebabkan lepuhan dan rasa gatal ekstrem pada kulit.',
    'Hailey_Hailey_Disease': 'Kelainan kulit genetik yang menyebabkan luka, lepuhan, dan erosi pada area lipatan tubuh.',
    'Hemangiome': 'Tumor jinak yang terbentuk dari pembuluh darah yang berlebihan, sering terlihat sebagai tanda lahir merah.',
    'Impetigo': 'Infeksi bakteri kulit yang sangat menular, ditandai dengan luka melepuh dan berkerak berwarna madu.',
    'Leishmanios': 'Penyakit parasit yang menyebabkan luka kulit, sering ditemukan di daerah tropis dan subtropis.',
    'Lupus_Erythematosus_Chronicus_Discoides': 'Bentuk lupus kulit yang menyebabkan lesi merah, bersisik, dan berparut, terutama di wajah dan kulit kepala.',
    'Melanoma': 'Jenis kanker kulit yang paling berbahaya, berasal dari sel penghasil pigmen (melanosit).',
    'Molluscum_Contagiosum': 'Infeksi virus yang menyebabkan benjolan kecil, keras, dan umumnya tidak nyeri di kulit.',
    'Porokeratosis': 'Gangguan keratinisasi kulit yang menyebabkan lesi berbentuk cincin dengan tepi yang menonjol.',
    'Psoriasis': 'Penyakit autoimun kronis yang menyebabkan penebalan kulit, kemerahan, dan sisik perak.',
    'Tinea_Corporis': 'Infeksi jamur pada kulit tubuh, sering disebut sebagai kurap, dengan ruam berbentuk cincin.',
    'Tungiasis': 'Infestasi oleh kutu pasir (Tunga penetrans) yang masuk ke kulit, sering terjadi di kaki.',
    'acne': 'Penyakit kulit umum akibat penyumbatan pori oleh minyak dan sel kulit mati, menyebabkan komedo dan jerawat.',
    'basal_cell_carcinoma': 'Jenis kanker kulit paling umum, tumbuh lambat dan jarang menyebar, muncul di area yang sering terpapar matahari.',
    'eczema': 'Kondisi kulit inflamasi kronis yang menyebabkan gatal, kemerahan, dan kadang pecah-pecah.',
    'lichen': 'Kelompok kelainan kulit yang menyebabkan ruam, penebalan kulit, dan gatal parah, misalnya lichen planus.',
    'nevus': 'Tanda lahir atau tahi lalat, bisa jinak atau berpotensi berubah menjadi kanker kulit.',
    'normal_skin': 'Kulit sehat tanpa tanda-tanda infeksi, inflamasi, atau gangguan dermatologis lainnya.'
}

for penyakit in daftar_penyakit:
    nama_penyakit_tampil = penyakit.replace("_", " ").title()
    with st.expander(f"**{nama_penyakit_tampil}**"):
        st.write(deskripsi_penyakit.get(penyakit, "Deskripsi belum tersedia."))

# --- Main Application UI ---
st.header("Deteksi Penyakit Kulit")


st.markdown("Berikut adalah penjelasan singkat mengenai beberapa jenis penyakit kulit yang dapat dideteksi:")

daftar_penyakit = [
    'biang_keringat', 'bisul', 'herpes', 'jerawat', 'kanker_melanoma',
    'kurap', 'kutil', 'psoriasis', 'seborrheic_keratoses', 'urtikaria'
]

deskripsi_penyakit = {
    'biang_keringat': "Biang keringat (miliaria) adalah ruam kecil kemerahan dan menonjol yang terasa gatal dan terkadang perih. Kondisi ini disebabkan oleh penyumbatan kelenjar keringat, sehingga keringat tidak bisa keluar ke permukaan kulit.",
    'bisul': "Bisul (furunkel) adalah benjolan merah pada kulit yang berisi nanah dan terasa nyeri. Kondisi ini disebabkan oleh infeksi bakteri Staphylococcus aureus pada folikel rambut.",
    'herpes': "Herpes kulit bisa merujuk pada beberapa kondisi, umumnya herpes zoster (cacar ular) atau herpes simpleks. Herpes zoster disebabkan oleh reaktivasi virus Varicella-zoster (penyebab cacar air) dan ditandai ruam lepuh yang nyeri pada satu sisi tubuh. Herpes simpleks menyebabkan luka lepuh di sekitar mulut (HSV-1) atau alat kelamin (HSV-2).",
    'jerawat': "Jerawat (acne vulgaris) adalah masalah kulit yang terjadi ketika folikel rambut tersumbat oleh minyak dan sel kulit mati. Kondisi ini sering ditandai dengan munculnya komedo, bintik merah meradang, hingga benjolan berisi nanah.",
    'kanker_melanoma': "Melanoma adalah jenis kanker kulit yang paling berbahaya. Kanker ini berkembang pada melanosit, sel penghasil melanin (pigmen pemberi warna kulit). Tanda umum melanoma adalah munculnya tahi lalat baru atau perubahan pada tahi lalat yang sudah ada, seperti bentuk, ukuran, atau warna yang tidak biasa (asimetris, batas tidak rata, warna beragam, diameter lebih dari 6mm, dan evolusi/perubahan).",
    'kurap': "Kurap (tinea corporis) adalah infeksi jamur pada kulit yang menyebabkan ruam melingkar kemerahan, bersisik, dan terasa gatal. Bagian tengah ruam seringkali terlihat lebih jernih.",
    'kutil': "Kutil (verruca) adalah pertumbuhan kecil jinak pada kulit yang disebabkan oleh infeksi Human Papillomavirus (HPV). Bentuknya bisa beragam, dari datar hingga menonjol seperti kembang kol, dan bisa muncul di berbagai bagian tubuh.",
    'psoriasis': "Psoriasis adalah penyakit autoimun kronis yang menyebabkan peradangan pada kulit. Gejalanya berupa bercak merah tebal bersisik keperakan, gatal, dan terkadang nyeri. Psoriasis dapat muncul di bagian tubuh mana pun, termasuk kulit kepala, siku, dan lutut.",
    'seborrheic_keratoses': "Keratosis seboroik adalah pertumbuhan kulit non-kanker (jinak) yang umum terjadi seiring bertambahnya usia. Lesinya bisa tampak seperti kutil, berwarna cokelat, hitam, atau terang, dengan permukaan kasar atau licin, dan seolah 'menempel' di kulit.",
    'urtikaria': "Urtikaria (biduran atau kaligata) adalah reaksi kulit yang ditandai dengan munculnya bentol-bentol kemerahan atau pucat yang menonjol (bidur) dan terasa sangat gatal. Kondisi ini bisa disebabkan oleh alergi, infeksi, stres, atau faktor lainnya."
}

for penyakit in daftar_penyakit:
    nama_penyakit_tampil = penyakit.replace("_", " ").title()
    with st.expander(f"**{nama_penyakit_tampil}**"):
        st.write(deskripsi_penyakit.get(penyakit, "Deskripsi belum tersedia."))

st.markdown("---")
st.info("‚ö†Ô∏è **Penting**: Informasi di atas hanya bersifat umum dan tidak menggantikan diagnosis atau saran medis profesional. Jika Anda memiliki keluhan kulit, segera konsultasikan dengan dokter atau ahli dermatologi.")

st.markdown("<div style='margin-top: 12rem;'></div>", unsafe_allow_html=True)


# Initialize session state for detection results if not already present
if 'detection_results' not in st.session_state:
    st.session_state['detection_results'] = []
if 'uploaded_file_key' not in st.session_state: # Use a different key for the file_uploader if needed
    st.session_state['uploaded_file_key'] = 0


# File uploader
uploaded_file = st.file_uploader("Upload Gambar Penyakit Kulit", type=["jpg", "jpeg", "png"], key=f"uploader_{st.session_state['uploaded_file_key']}")

# Buttons in columns
col1, col2 = st.columns(2)
with col1:
    detect_btn = st.button("Mulai Deteksi", use_container_width=True)
with col2:
    clear_btn = st.button("Hapus Ini", use_container_width=True)

if detect_btn:
    if uploaded_file is None:
        st.warning("‚ö†Ô∏è Harap upload gambar terlebih dahulu.")
    else:
        st.session_state['detection_results'] = []  # Reset previous results for a new detection
        with st.spinner("üî¨ Menganalisis gambar... Mohon tunggu sebentar..."):
            result = run_detection_logic(uploaded_file)
            st.session_state['detection_results'].append(result)
            # No rerun needed here, results will display below

if clear_btn:
    st.session_state['detection_results'] = []
    st.session_state['uploaded_file_key'] += 1 # Increment key to reset file uploader
    # st.experimental_rerun() # Use st.rerun() for newer Streamlit versions
    st.rerun()


# --- Display Detection Results ---
if st.session_state['detection_results']:
    for result in st.session_state['detection_results']:
        st.markdown(f"--- \n ### Hasil Deteksi untuk: {result['filename']}")

        if result.get("error"):
            st.error(f"Terjadi kesalahan: {result['error']}")

        if result['image_path'] and os.path.exists(result["image_path"]):
            st.image(result["image_path"], caption="Gambar dengan Deteksi", use_container_width=True)
        elif uploaded_file and not result.get("error"): # If no processed image but no error, show original
            st.image(uploaded_file, caption="Gambar Asli (Tidak ada output deteksi visual)", use_container_width=True)


        if result['labels']:
            counts = Counter(result["labels"])
            st.markdown("--- \n #### ‚úÖ Penyakit Kulit yang Terdeteksi:")
            for label, count in counts.items():
                display_label = label.replace("_", " ").title()
                st.success(f"**{display_label}**") # Removed count if only one instance is primary

            st.markdown("--- \n #### üìù Saran Penanganan:")
            displayed_treatments = set()
            for label in result["labels"]: # Iterate in order of detection if relevant
                if label not in displayed_treatments:
                    treatment_steps = penanganan_dict.get(label)
                    display_label = label.replace("_", " ").title()
                    if treatment_steps:
                        with st.expander(f"**Penanganan untuk {display_label}**", expanded=False):
                            for i, step in enumerate(treatment_steps, 1):
                                st.markdown(f"{i}. {step}")
                    else:
                        st.info(f"Tidak ada informasi penanganan spesifik untuk {display_label} dalam data kami.")
                    displayed_treatments.add(label)
        elif not result.get("error"): # No labels and no error
            st.info("‚ÑπÔ∏è Tidak ada jenis penyakit kulit yang terdeteksi pada gambar ini atau deteksi di bawah ambang batas.")

elif not uploaded_file: # Initial state or after clearing
    st.info("Selamat datang! Silakan upload gambar kulit yang ingin diperiksa dan klik 'Jalankan Deteksi'.")



